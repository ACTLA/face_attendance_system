"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü —Å –Ω–∞–¥–µ–∂–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞–º–µ—Ä–æ–π
"""
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                           QPushButton, QFrame, QListWidget, QListWidgetItem,
                           QSizePolicy, QMessageBox)
from PyQt5.QtCore import Qt, QTimer, QDateTime
from PyQt5.QtGui import QFont, QPixmap, QImage
import cv2
import numpy as np
import os
from datetime import datetime

from config import (PRIMARY_COLOR, SECONDARY_COLOR, WARNING_COLOR, 
                   USER_PHOTOS_DIR)
from camera_manager import camera_manager
from face_recognition_engine import FaceRecognitionEngine

class FaceRecognitionWidget(QWidget):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü"""
    
    def __init__(self, database, admin_data):
        super().__init__()
        self.db = database
        self.admin_data = admin_data
        
        # –î–≤–∏–∂–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü
        self.recognition_engine = FaceRecognitionEngine(database)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_camera_active = False
        self.current_user_info = None
        
        # –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
        self._processing_frame = False
        
        self.init_ui()
        
        # –£–ë–ò–†–ê–ï–ú –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ frame_ready —Å–∏–≥–Ω–∞–ª—É - –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç –≤—ã–ª–µ—Ç—ã
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ callbacks
        camera_manager.camera_error.connect(self.on_camera_error)
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QHBoxLayout()
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(20)
        self.setLayout(main_layout)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–∞–º–µ—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        left_panel = self.create_camera_panel()
        main_layout.addWidget(left_panel, 2)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        right_panel = self.create_info_panel()
        main_layout.addWidget(right_panel, 1)
    
    def create_camera_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∫–∞–º–µ—Ä—ã"""
        panel = QWidget()
        panel.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        layout = QVBoxLayout()
        panel.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü")
        title.setFont(QFont("Arial", 20, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # –í–∏–¥–µ–æ –æ–±–ª–∞—Å—Ç—å
        self.video_label = QLabel()
        self.video_label.resize(0, 0)
        self.video_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.video_label.setAlignment(Qt.AlignCenter)
        self.video_label.setStyleSheet("""
            QLabel {
                border: 3px solid #ddd;
                border-radius: 10px;
                background-color: #2c3e50;
                color: #95a5a6;
                font-size: 16px;
            }
        """)
        self.show_camera_placeholder()
        layout.addWidget(self.video_label)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("–ö–ê–ú–ï–†–ê –í–´–ö–õ–Æ–ß–ï–ù–ê")
        self.status_label.setFont(QFont("Arial", 14, QFont.Bold))
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.resize(640, 40)
        self.status_label.setStyleSheet("""
            QLabel {
                background-color: #6c757d;
                color: white;
                padding: 10px;
                border-radius: 8px;
                margin: 10px 0;
            }
        """)
        layout.addWidget(self.status_label)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_layout = QHBoxLayout()
        
        self.start_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å")
        self.start_button.setFont(QFont("Arial", 12, QFont.Bold))
        self.start_button.setMinimumHeight(45)
        self.start_button.setCursor(Qt.PointingHandCursor)
        self.start_button.setStyleSheet(f"""
            QPushButton {{
                background-color: {SECONDARY_COLOR};
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 8px;
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: #218838;
            }}
            QPushButton:disabled {{
                background-color: #6c757d;
            }}
        """)
        self.start_button.clicked.connect(self.start_recognition)
        
        self.stop_button = QPushButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_button.setFont(QFont("Arial", 12, QFont.Bold))
        self.stop_button.setMinimumHeight(45)
        self.stop_button.setCursor(Qt.PointingHandCursor)
        self.stop_button.setEnabled(False)
        self.stop_button.setStyleSheet("""
            QPushButton {
                background-color: #dc3545;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 8px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c82333;
            }
            QPushButton:disabled {
                background-color: #6c757d;
            }
        """)
        self.stop_button.clicked.connect(self.stop_recognition)
        
        controls_layout.addWidget(self.start_button)
        controls_layout.addWidget(self.stop_button)
        layout.addLayout(controls_layout)
        
        return panel
    
    def create_info_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        panel = QWidget()
        panel.setFixedWidth(300)
        panel.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Expanding)
        layout = QVBoxLayout()
        panel.setLayout(layout)
        
        # –í—Ä–µ–º—è
        self.time_label = QLabel()
        self.time_label.setFont(QFont("Arial", 16, QFont.Bold))
        self.time_label.setAlignment(Qt.AlignCenter)
        self.time_label.setStyleSheet(f"color: {PRIMARY_COLOR}; padding: 10px;")
        layout.addWidget(self.time_label)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_frame = QFrame()
        user_frame.setStyleSheet("""
            QFrame {
                background-color: white;
                border-radius: 10px;
                padding: 20px;
                border: 1px solid #ddd;
                margin: 10px 0;
            }
        """)
        user_layout = QVBoxLayout()
        user_frame.setLayout(user_layout)
        
        # –§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_photo = QLabel()
        self.user_photo.setFixedSize(200, 200)
        self.user_photo.setAlignment(Qt.AlignCenter)
        self.user_photo.setStyleSheet("""
            QLabel {
                border: 2px solid #ddd;
                border-radius: 50px;
                background-color: #f8f9fa;
                font-size: 40px;
            }
        """)
        self.clear_user_photo()
        user_layout.addWidget(self.user_photo, 0, Qt.AlignCenter)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        self.user_name = QLabel("---")
        self.user_name.setFont(QFont("Arial", 14, QFont.Bold))
        self.user_name.setAlignment(Qt.AlignCenter)
        self.user_name.setWordWrap(True)
        user_layout.addWidget(self.user_name)
        
        self.user_id = QLabel("---")
        self.user_id.setFont(QFont("Arial", 11))
        self.user_id.setAlignment(Qt.AlignCenter)
        self.user_id.setStyleSheet("color: #666;")
        user_layout.addWidget(self.user_id)
        
        self.confidence_label = QLabel("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 0%")
        self.confidence_label.setFont(QFont("Arial", 10, QFont.Bold))
        self.confidence_label.setAlignment(Qt.AlignCenter)
        self.confidence_label.setStyleSheet(f"color: {PRIMARY_COLOR};")
        user_layout.addWidget(self.confidence_label)
        
        layout.addWidget(user_frame)
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        logs_label = QLabel("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        logs_label.setFont(QFont("Arial", 12, QFont.Bold))
        layout.addWidget(logs_label)
        
        self.logs_list = QListWidget()
        self.logs_list.setStyleSheet("""
            QListWidget {
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 8px;
                padding: 5px;
            }
            QListWidget::item {
                padding: 8px;
                border-bottom: 1px solid #f0f0f0;
                margin: 2px 0;
            }
            QListWidget::item:hover {
                background-color: #f8f9fa;
            }
        """)
        layout.addWidget(self.logs_list)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_time)
        self.timer.start(1000)
        self.update_time()
        
        return panel
    
    def show_camera_placeholder(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É –∫–∞–º–µ—Ä—ã"""
        try:
            self.video_label.clear()
            self.video_label.setText("üì∑\n\n–ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞\n\n–ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å'\n–¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏: {e}")
    
    def start_recognition(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü"""
        if self.is_camera_active:
            return
        
        try:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–¥—Ä—ã –∫–∞–º–µ—Ä—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            camera_manager.subscribe_to_frames(self.process_frame_for_recognition)
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–¥—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            camera_manager.subscribe_to_frames(self.on_frame_ready)
            
            # –ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã
            if camera_manager.start_camera():
                self.is_camera_active = True
                self.start_button.setEnabled(False)
                self.stop_button.setEnabled(True)
                
                self.status_label.setText("–ü–û–ò–°–ö –õ–ò–¶...")
                self.status_label.setStyleSheet(f"""
                    QLabel {{
                        background-color: {WARNING_COLOR};
                        color: white;
                        padding: 10px;
                        border-radius: 8px;
                        margin: 10px 0;
                    }}
                """)
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
    
    def stop_recognition(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü"""
        if not self.is_camera_active:
            return
        
        try:
            self.is_camera_active = False
            
            # –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–¥—Ä–æ–≤
            camera_manager.unsubscribe_from_frames(self.process_frame_for_recognition)
            camera_manager.unsubscribe_from_frames(self.on_frame_ready)
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã
            camera_manager.stop_camera()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
            self.start_button.setEnabled(True)
            self.stop_button.setEnabled(False)
            
            self.show_camera_placeholder()
            
            self.status_label.setText("–ö–ê–ú–ï–†–ê –í–´–ö–õ–Æ–ß–ï–ù–ê")
            self.status_label.setStyleSheet("""
                QLabel {
                    background-color: #6c757d;
                    color: white;
                    padding: 10px;
                    border-radius: 8px;
                    margin: 10px 0;
                }
            """)
            
            # –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            self.clear_user_info()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
    
    def on_frame_ready(self, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã"""
        if not self.is_camera_active:
            return
        
        try:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ - –ü–†–û–°–¢–û–ï –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            self.display_frame_simple(frame)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–¥—Ä–∞: {e}")
    
    def display_frame_simple(self, frame):
        """–ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        try:
            if frame is None or frame.size == 0:
                return
                
            # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            height, width, channel = rgb_frame.shape
            bytes_per_line = 3 * width
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            q_image = QImage(rgb_frame.data, width, height, bytes_per_line, QImage.Format_RGB888)
            pixmap = QPixmap.fromImage(q_image)
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            label_size = self.video_label.size()
            if label_size.width() > 0 and label_size.height() > 0:
                scaled_pixmap = pixmap.scaled(label_size, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                self.video_label.setPixmap(scaled_pixmap)
            
        except Exception as e:
            # –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–¥—Ä
            pass
    
    def process_frame_for_recognition(self, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü"""
        if not self.is_camera_active or self._processing_frame:
            return
        
        try:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self._processing_frame = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–∞–¥—Ä–∞
            if frame is None or frame.size == 0:
                return
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü
            matches = self.recognition_engine.process_frame(frame)
            
            if matches:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ
                match = matches[0]
                self.on_face_recognized(match)
            else:
                # –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –µ—Å–ª–∏ –¥–æ–ª–≥–æ –Ω–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–π
                if self.current_user_info is None:
                    self.update_status("–ü–û–ò–°–ö –õ–ò–¶...")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        finally:
            # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self._processing_frame = False
    
    def on_face_recognized(self, match):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = self.db.get_user_by_id(match.user_id)
            if not user:
                return
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            self.update_user_info(user, match.confidence)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                self.db.add_recognition_log(match.user_id, match.confidence, 'SUCCESS')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            self.update_status(f"–†–ê–°–ü–û–ó–ù–ê–ù ({match.confidence*100:.1f}%)", success=True)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ª–æ–≥
            self.add_to_logs(f"{datetime.now().strftime('%H:%M:%S')} - {user['full_name']} ({match.confidence*100:.1f}%)")
            
            # –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            QTimer.singleShot(3000, lambda: self.update_status("–ü–û–ò–°–ö –õ–ò–¶..."))
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞: {e}")
    
    def update_user_info(self, user, confidence):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            self.current_user_info = user
            
            # –ò–º—è
            self.user_name.setText(user['full_name'])
            
            # ID
            self.user_id.setText(f"ID: {user['user_id']}")
            
            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            self.confidence_label.setText(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {int(confidence * 100)}%")
            
            # –§–æ—Ç–æ
            self.load_user_photo(user.get('photo_path'))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
    
    def load_user_photo(self, photo_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if photo_path:
                full_path = os.path.join(USER_PHOTOS_DIR, photo_path)
                if os.path.exists(full_path):
                    try:
                        pixmap = QPixmap(full_path)
                        if not pixmap.isNull():
                            scaled_pixmap = pixmap.scaled(100, 100, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                            self.user_photo.setPixmap(scaled_pixmap)
                            self.user_photo.setStyleSheet("""
                                QLabel {
                                    border: 2px solid #28a745;
                                    border-radius: 50px;
                                    background-color: white;
                                }
                            """)
                            return
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
            
            # –§–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.set_default_user_photo()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ load_user_photo: {e}")
            self.set_default_user_photo()
    
    def set_default_user_photo(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            self.user_photo.clear()
            self.user_photo.setText("üë§")
            self.user_photo.setStyleSheet("""
                QLabel {
                    border: 2px solid #28a745;
                    border-radius: 50px;
                    background-color: #f8f9fa;
                    font-size: 40px;
                    color: #28a745;
                }
            """)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
    
    def clear_user_photo(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            self.user_photo.clear()
            self.user_photo.setText("‚ùì")
            self.user_photo.setStyleSheet("""
                QLabel {
                    border: 2px solid #ddd;
                    border-radius: 50px;
                    background-color: #f8f9fa;
                    font-size: 40px;
                    color: #999;
                }
            """)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
    
    def clear_user_info(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            self.current_user_info = None
            self.user_name.setText("---")
            self.user_id.setText("---")
            self.confidence_label.setText("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 0%")
            self.clear_user_photo()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
    
    def update_status(self, text, success=False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            self.status_label.setText(text)
            
            if success:
                color = SECONDARY_COLOR
            elif "–ü–û–ò–°–ö" in text:
                color = WARNING_COLOR
            else:
                color = "#6c757d"
            
            self.status_label.setStyleSheet(f"""
                QLabel {{
                    background-color: {color};
                    color: white;
                    padding: 10px;
                    border-radius: 8px;
                    margin: 10px 0;
                }}
            """)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def add_to_logs(self, log_text):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤"""
        try:
            item = QListWidgetItem(log_text)
            item.setFont(QFont("Arial", 9))
            self.logs_list.insertItem(0, item)
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
            while self.logs_list.count() > 10:
                self.logs_list.takeItem(10)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ª–æ–≥: {e}")
    
    def update_time(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            current_time = QDateTime.currentDateTime()
            self.time_label.setText(current_time.toString("hh:mm:ss\ndd.MM.yyyy"))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
    
    def on_camera_error(self, error_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∫–∞–º–µ—Ä—ã"""
        try:
            print(f"–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã: {error_message}")
            self.stop_recognition()
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã", error_message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –∫–∞–º–µ—Ä—ã: {e}")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∏–¥–∂–µ—Ç–∞"""
        try:
            if self.is_camera_active:
                self.stop_recognition()
            event.accept()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∏–¥–∂–µ—Ç–∞: {e}")
            event.accept()