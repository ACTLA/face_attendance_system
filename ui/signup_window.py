"""
–û–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                           QLineEdit, QPushButton, QMessageBox)
from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5.QtGui import QFont

from database import Database
from config import WINDOW_TITLE, PRIMARY_COLOR, PASSWORD_MIN_LENGTH

class SignupWindow(QWidget):
    signup_successful = pyqtSignal()
    
    def __init__(self):
        super().__init__()
        self.db = Database()
        self.init_ui()
    
    def init_ui(self):
        self.setWindowTitle(f"Sign Up - {WINDOW_TITLE}")
        self.setFixedSize(500, 600)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QVBoxLayout()
        layout.setContentsMargins(50, 50, 50, 50)
        self.setLayout(layout)
        
        # –ò–∫–æ–Ω–∫–∞
        icon_label = QLabel("üë§")
        icon_label.setFont(QFont("Arial", 60))
        icon_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(icon_label)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("Sign Up")
        title.setFont(QFont("Arial", 28, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        layout.addSpacing(30)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.username_input = QLineEdit()
        self.username_input.setPlaceholderText("Username")
        self.username_input.setStyleSheet(self.get_input_style())
        layout.addWidget(self.username_input)
        
        self.email_input = QLineEdit()
        self.email_input.setPlaceholderText("Email")
        self.email_input.setStyleSheet(self.get_input_style())
        layout.addWidget(self.email_input)
        
        self.password_input = QLineEdit()
        self.password_input.setPlaceholderText("Password")
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setStyleSheet(self.get_input_style())
        layout.addWidget(self.password_input)
        
        self.confirm_password_input = QLineEdit()
        self.confirm_password_input.setPlaceholderText("Confirm Password")
        self.confirm_password_input.setEchoMode(QLineEdit.Password)
        self.confirm_password_input.setStyleSheet(self.get_input_style())
        layout.addWidget(self.confirm_password_input)
        
        layout.addSpacing(20)
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self.register_button = QPushButton("Register")
        self.register_button.setFont(QFont("Arial", 14, QFont.Bold))
        self.register_button.setCursor(Qt.PointingHandCursor)
        self.register_button.setStyleSheet(f"""
            QPushButton {{
                background-color: {PRIMARY_COLOR};
                color: white;
                border: none;
                border-radius: 8px;
                padding: 14px;
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: #2d4aa3;
            }}
        """)
        self.register_button.clicked.connect(self.handle_signup)
        layout.addWidget(self.register_button)
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Ö–æ–¥
        login_layout = QHBoxLayout()
        login_layout.setAlignment(Qt.AlignCenter)
        
        login_text = QLabel("Already a User?")
        login_text.setStyleSheet("color: #666;")
        login_layout.addWidget(login_text)
        
        login_link = QPushButton("Login")
        login_link.setCursor(Qt.PointingHandCursor)
        login_link.setStyleSheet("""
            QPushButton {
                background: none;
                border: none;
                color: #667eea;
                font-weight: bold;
                text-decoration: underline;
            }
            QPushButton:hover {
                color: #4c5fd8;
            }
        """)
        login_link.clicked.connect(self.close)
        login_layout.addWidget(login_link)
        
        layout.addLayout(login_layout)
        
        # –°—Ç–∏–ª—å –æ–∫–Ω–∞
        self.setStyleSheet("""
            QWidget {
                background-color: white;
            }
        """)
        
        # Enter –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self.username_input.returnPressed.connect(self.handle_signup)
        self.email_input.returnPressed.connect(self.handle_signup)
        self.password_input.returnPressed.connect(self.handle_signup)
        self.confirm_password_input.returnPressed.connect(self.handle_signup)
    
    def get_input_style(self):
        """–°—Ç–∏–ª—å –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞"""
        return """
            QLineEdit {
                padding: 12px;
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                font-size: 14px;
                background-color: #f8f9fa;
                margin-bottom: 10px;
            }
            QLineEdit:focus {
                border-color: #667eea;
                background-color: white;
            }
        """
    
    def handle_signup(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        username = self.username_input.text().strip()
        email = self.email_input.text().strip()
        password = self.password_input.text()
        confirm_password = self.confirm_password_input.text()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π
        if not all([username, email, password, confirm_password]):
            QMessageBox.warning(self, "Error", "Please fill in all fields")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
        if '@' not in email or '.' not in email:
            QMessageBox.warning(self, "Error", "Please enter a valid email address")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
        if len(password) < PASSWORD_MIN_LENGTH:
            QMessageBox.warning(self, "Error", f"Password must be at least {PASSWORD_MIN_LENGTH} characters long")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
        if password != confirm_password:
            QMessageBox.warning(self, "Error", "Passwords do not match")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.db.create_user(username, email, password):
            self.signup_successful.emit()
            self.close()
        else:
            QMessageBox.warning(self, "Error", "Username or email already exists")
    
    def keyPressEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à"""
        if event.key() == Qt.Key_Escape:
            self.close()