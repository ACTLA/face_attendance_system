"""
–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü
"""
from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, 
                           QLineEdit, QPushButton, QFileDialog, QMessageBox,
                           QFormLayout, QFrame, QWidget, QTabWidget, QSizePolicy,
                           QScrollArea)
from PyQt5.QtCore import Qt, QTimer, QThread, pyqtSignal
from PyQt5.QtGui import QFont, QPixmap, QPainter, QBrush

import os
import cv2
import face_recognition
import numpy as np
from datetime import datetime

from config import USER_PHOTOS_DIR, PRIMARY_COLOR, SECONDARY_COLOR

class CameraThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–º–µ—Ä–æ–π"""
    frame_ready = pyqtSignal(np.ndarray)
    face_detected = pyqtSignal(np.ndarray, list)
    
    def __init__(self):
        super().__init__()
        self.is_running = False
        self.cap = None
    
    def run(self):
        self.is_running = True
        
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ DirectShow
            self.cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
            
            if not self.cap.isOpened():
                # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ DirectShow
                self.cap = cv2.VideoCapture(0)
                
            if not self.cap.isOpened():
                return
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
            self.cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
            
        except Exception as e:
            return
        
        while self.is_running:
            try:
                ret, frame = self.cap.read()
                if not ret:
                    if self.is_running:
                        continue
                    else:
                        break
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–¥—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if self.is_running:
                    self.frame_ready.emit(frame.copy())
                
                # –ü–æ–∏—Å–∫ –ª–∏—Ü
                if self.is_running:
                    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    face_locations = face_recognition.face_locations(rgb_frame)
                    
                    if face_locations and self.is_running:
                        self.face_detected.emit(frame.copy(), face_locations)
                        
            except Exception as e:
                if self.is_running:
                    continue
                else:
                    break
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        if self.cap:
            try:
                self.cap.release()
            except:
                pass
            self.cap = None
    
    def stop(self):
        self.is_running = False
        
        if self.cap:
            try:
                self.cap.release()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã: {e}")
            self.cap = None
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        if not self.wait(2000):  # 2 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç
            self.terminate()
            self.wait(1000)

class AddUserDialog(QDialog):
    def __init__(self, parent, database, admin_data):
        super().__init__(parent)
        self.db = database
        self.admin_data = admin_data
        self.photo_path = None
        self.face_encoding = None
        self.camera_thread = None
        self.current_frame = None
        self.detected_faces = []
        self.init_ui()
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        from PyQt5.QtWidgets import QDesktopWidget
        desktop = QDesktopWidget()
        screen_rect = desktop.screenGeometry()
        
        if screen_rect.width() >= 1920:
            dialog_width, dialog_height = 850, 600
            photo_size, camera_width, camera_height = 250, 450, 340
        elif screen_rect.width() >= 1366:
            dialog_width, dialog_height = 800, 550
            photo_size, camera_width, camera_height = 220, 400, 300
        else:
            dialog_width, dialog_height = 750, 500
            photo_size, camera_width, camera_height = 200, 350, 260
        
        self.setMinimumSize(700, 450)
        self.resize(dialog_width, dialog_height)
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        x = (screen_rect.width() - dialog_width) // 2
        y = (screen_rect.height() - dialog_height) // 2
        self.move(max(0, x), max(0, y))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.photo_size = photo_size
        self.camera_width = camera_width
        self.camera_height = camera_height
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_scroll = QScrollArea()
        main_scroll.setWidgetResizable(True)
        main_scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        main_scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        
        main_widget = QWidget()
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(15)
        main_widget.setLayout(main_layout)
        
        main_scroll.setWidget(main_widget)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π layout
        final_layout = QVBoxLayout()
        final_layout.setContentsMargins(0, 0, 0, 0)
        final_layout.addWidget(main_scroll)
        self.setLayout(final_layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        title.setFont(QFont("Arial", 24, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title)
        
        # –§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö
        form_frame = QFrame()
        form_frame.setStyleSheet("""
            QFrame {
                background-color: white;
                border-radius: 10px;
                padding: 20px;
                margin: 10px;
            }
        """)
        form_layout = QFormLayout()
        form_frame.setLayout(form_layout)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.user_id_input = QLineEdit()
        self.user_id_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
        self.user_id_input.setStyleSheet(self.get_input_style())
        self.user_id_input.setMinimumHeight(40)
        
        self.full_name_input = QLineEdit()
        self.full_name_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è")
        self.full_name_input.setStyleSheet(self.get_input_style())
        self.full_name_input.setMinimumHeight(40)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º—É
        form_layout.addRow("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", self.user_id_input)
        form_layout.addRow("–ü–æ–ª–Ω–æ–µ –∏–º—è:", self.full_name_input)
        
        main_layout.addWidget(form_frame)
        
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
        self.tab_widget = QTabWidget()
        self.tab_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        
        # –í–∫–ª–∞–¥–∫–∞ —Å —Ñ–∞–π–ª–æ–º
        self.file_tab = self.create_file_tab()
        self.tab_widget.addTab(self.file_tab, "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
        
        # –í–∫–ª–∞–¥–∫–∞ —Å –∫–∞–º–µ—Ä–æ–π
        self.camera_tab = self.create_camera_tab()
        self.tab_widget.addTab(self.camera_tab, "üì∑ –°–Ω—è—Ç—å —Å –∫–∞–º–µ—Ä—ã")
        
        main_layout.addWidget(self.tab_widget)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        
        self.cancel_button = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.cancel_button.setFont(QFont("Arial", 14))
        self.cancel_button.setCursor(Qt.PointingHandCursor)
        self.cancel_button.setMinimumHeight(45)
        self.cancel_button.setStyleSheet("""
            QPushButton {
                background-color: #6c757d;
                color: white;
                border: none;
                padding: 12px 30px;
                border-radius: 8px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #5a6268;
            }
        """)
        self.cancel_button.clicked.connect(self.reject)
        
        self.add_button = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        self.add_button.setFont(QFont("Arial", 14, QFont.Bold))
        self.add_button.setCursor(Qt.PointingHandCursor)
        self.add_button.setMinimumHeight(45)
        self.add_button.setStyleSheet(f"""
            QPushButton {{
                background-color: {SECONDARY_COLOR};
                color: white;
                border: none;
                padding: 12px 30px;
                border-radius: 8px;
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: #4cae4c;
            }}
            QPushButton:disabled {{
                background-color: #95a5a6;
            }}
        """)
        self.add_button.clicked.connect(self.add_user)
        
        buttons_layout.addStretch()
        buttons_layout.addWidget(self.cancel_button)
        buttons_layout.addWidget(self.add_button)
        
        main_layout.addLayout(buttons_layout)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–æ–∫
        self.tab_widget.currentChanged.connect(self.on_tab_changed)
    
    def create_file_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
        tab = QWidget()
        layout = QVBoxLayout()
        tab.setLayout(layout)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è —Ñ–æ—Ç–æ
        self.photo_label = QLabel()
        self.photo_label.setFixedSize(self.photo_size, self.photo_size)
        self.photo_label.setAlignment(Qt.AlignCenter)
        self.photo_label.setStyleSheet("""
            QLabel {
                border: 3px dashed #ddd;
                border-radius: 15px;
                background-color: #f8f9fa;
            }
        """)
        self.photo_label.setText("üì∑\n–§–æ—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        self.photo_label.setFont(QFont("Arial", 16))
        layout.addWidget(self.photo_label, 0, Qt.AlignCenter)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ
        self.choose_photo_button = QPushButton("–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        self.choose_photo_button.setCursor(Qt.PointingHandCursor)
        self.choose_photo_button.setMinimumHeight(40)
        self.choose_photo_button.setStyleSheet("""
            QPushButton {
                background-color: #f8f9fa;
                border: 1px solid #ddd;
                padding: 12px 30px;
                border-radius: 8px;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #e9ecef;
            }
        """)
        self.choose_photo_button.clicked.connect(self.choose_photo)
        layout.addWidget(self.choose_photo_button, 0, Qt.AlignCenter)
        
        # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ
        requirements_frame = QFrame()
        requirements_frame.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border-radius: 8px;
                padding: 15px;
                margin: 10px;
            }
        """)
        requirements_layout = QVBoxLayout()
        requirements_frame.setLayout(requirements_layout)
        
        req_title = QLabel("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:")
        req_title.setFont(QFont("Arial", 12, QFont.Bold))
        requirements_layout.addWidget(req_title)
        
        requirements = [
            "‚Ä¢ –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞ –≤ –∞–Ω—Ñ–∞—Å",
            "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
            "‚Ä¢ –ë–µ–∑ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã—Ö –æ—á–∫–æ–≤",
            "‚Ä¢ –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —Ñ–æ—Ç–æ",
            "‚Ä¢ –§–æ—Ä–º–∞—Ç JPG –∏–ª–∏ PNG"
        ]
        
        for req in requirements:
            req_label = QLabel(req)
            req_label.setStyleSheet("color: #666; margin-left: 10px;")
            requirements_layout.addWidget(req_label)
        
        layout.addWidget(requirements_frame)
        
        return tab
    
    def create_camera_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å –∫–∞–º–µ—Ä–æ–π"""
        tab = QWidget()
        layout = QVBoxLayout()
        tab.setLayout(layout)
        
        # –û–±–ª–∞—Å—Ç—å –≤–∏–¥–µ–æ
        self.camera_label = QLabel()
        self.camera_label.setFixedSize(self.camera_width, self.camera_height)
        self.camera_label.setAlignment(Qt.AlignCenter)
        self.camera_label.setStyleSheet("""
            QLabel {
                border: 2px solid #ddd;
                border-radius: 10px;
                background-color: #000;
            }
        """)
        self.camera_label.setText("üì∑\n–ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞")
        self.camera_label.setFont(QFont("Arial", 20))
        self.camera_label.setStyleSheet("""
            QLabel {
                border: 2px solid #ddd;
                border-radius: 10px;
                background-color: #000;
                color: #666;
            }
        """)
        layout.addWidget(self.camera_label, 0, Qt.AlignCenter)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π
        camera_controls = QHBoxLayout()
        
        self.start_camera_button = QPushButton("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É")
        self.start_camera_button.setFont(QFont("Arial", 12))
        self.start_camera_button.setCursor(Qt.PointingHandCursor)
        self.start_camera_button.setMinimumHeight(40)
        self.start_camera_button.setStyleSheet(f"""
            QPushButton {{
                background-color: {SECONDARY_COLOR};
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 8px;
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: #4cae4c;
            }}
        """)
        self.start_camera_button.clicked.connect(self.start_camera)
        
        self.stop_camera_button = QPushButton("‚èπÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É")
        self.stop_camera_button.setFont(QFont("Arial", 12))
        self.stop_camera_button.setCursor(Qt.PointingHandCursor)
        self.stop_camera_button.setMinimumHeight(40)
        self.stop_camera_button.setEnabled(False)
        self.stop_camera_button.setStyleSheet("""
            QPushButton {
                background-color: #dc3545;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 8px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c82333;
            }
            QPushButton:disabled {
                background-color: #6c757d;
            }
        """)
        self.stop_camera_button.clicked.connect(self.stop_camera)
        
        self.capture_button = QPushButton("üì∏ –ó–∞—Ö–≤–∞—Ç–∏—Ç—å –ª–∏—Ü–æ")
        self.capture_button.setFont(QFont("Arial", 12))
        self.capture_button.setCursor(Qt.PointingHandCursor)
        self.capture_button.setMinimumHeight(40)
        self.capture_button.setEnabled(False)
        self.capture_button.setStyleSheet(f"""
            QPushButton {{
                background-color: {PRIMARY_COLOR};
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 8px;
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: #2d4aa3;
            }}
            QPushButton:disabled {{
                background-color: #6c757d;
            }}
        """)
        self.capture_button.clicked.connect(self.capture_face)
        
        camera_controls.addWidget(self.start_camera_button)
        camera_controls.addWidget(self.stop_camera_button)
        camera_controls.addWidget(self.capture_button)
        
        layout.addLayout(camera_controls)
        
        # –°—Ç–∞—Ç—É—Å
        self.camera_status_label = QLabel("–ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞")
        self.camera_status_label.setFont(QFont("Arial", 14))
        self.camera_status_label.setAlignment(Qt.AlignCenter)
        self.camera_status_label.setStyleSheet("""
            QLabel {
                background-color: #6c757d;
                color: white;
                padding: 10px;
                border-radius: 8px;
                margin: 10px;
            }
        """)
        layout.addWidget(self.camera_status_label)
        
        return tab
    
    def get_input_style(self):
        """–°—Ç–∏–ª—å –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞"""
        return """
            QLineEdit {
                padding: 10px;
                border: 1px solid #ddd;
                border-radius: 8px;
                font-size: 14px;
                background-color: #f8f9fa;
            }
            QLineEdit:focus {
                border-color: #667eea;
                background-color: white;
            }
        """
    
    def on_tab_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–æ–∫"""
        if index == 0:  # –í–∫–ª–∞–¥–∫–∞ —Ñ–∞–π–ª–∞
            self.stop_camera()
        elif index == 1:  # –í–∫–ª–∞–¥–∫–∞ –∫–∞–º–µ—Ä—ã
            pass  # –ö–∞–º–µ—Ä—É –≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ
    
    def choose_photo(self):
        """–í—ã–±–æ—Ä —Ñ–æ—Ç–æ –∏–∑ —Ñ–∞–π–ª–∞"""
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(
            self, 
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
            "", 
            "Image Files (*.png *.jpg *.jpeg)"
        )
        
        if file_path:
            self.process_image_file(file_path)
    
    def process_image_file(self, file_path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = cv2.imread(file_path)
        if image is None:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        
        # –ü–æ–∏—Å–∫ –ª–∏—Ü–∞ –Ω–∞ —Ñ–æ—Ç–æ
        rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        face_locations = face_recognition.face_locations(rgb_image)
        
        if len(face_locations) == 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª–∏—Ü–æ")
            return
        
        if len(face_locations) > 1:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Ü. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ç–æ —Å –æ–¥–Ω–∏–º –ª–∏—Ü–æ–º")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ª–∏—Ü–∞
        face_encodings = face_recognition.face_encodings(rgb_image, face_locations)
        if face_encodings:
            self.face_encoding = face_encodings[0].tolist()
            self.photo_path = file_path
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Å —Ä–∞–º–∫–æ–π –≤–æ–∫—Ä—É–≥ –ª–∏—Ü–∞
            self.display_image_with_face_box(image, face_locations[0])
            
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–õ–∏—Ü–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
    
    def display_image_with_face_box(self, image, face_location):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–º–∫–æ–π –≤–æ–∫—Ä—É–≥ –ª–∏—Ü–∞"""
        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        display_image = image.copy()
        
        # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É –≤–æ–∫—Ä—É–≥ –ª–∏—Ü–∞
        top, right, bottom, left = face_location
        cv2.rectangle(display_image, (left, top), (right, bottom), (0, 255, 0), 3)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Qt
        rgb_image = cv2.cvtColor(display_image, cv2.COLOR_BGR2RGB)
        height, width, channel = rgb_image.shape
        bytes_per_line = 3 * width
        
        from PyQt5.QtGui import QImage
        q_image = QImage(rgb_image.data, width, height, bytes_per_line, QImage.Format_RGB888)
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        pixmap = QPixmap.fromImage(q_image)
        scaled_pixmap = pixmap.scaled(self.photo_size, self.photo_size, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        
        self.photo_label.setPixmap(scaled_pixmap)
        self.photo_label.setStyleSheet("""
            QLabel {
                border: 3px solid #4cae4c;
                border-radius: 15px;
            }
        """)
    
    def start_camera(self):
        """–ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã"""
        self.camera_thread = CameraThread()
        self.camera_thread.frame_ready.connect(self.update_camera_frame)
        self.camera_thread.face_detected.connect(self.on_face_detected)
        self.camera_thread.start()
        
        self.start_camera_button.setEnabled(False)
        self.stop_camera_button.setEnabled(True)
        self.capture_button.setEnabled(True)
        
        self.camera_status_label.setText("–ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞ - –∏—â–µ–º –ª–∏—Ü–∞...")
        self.camera_status_label.setStyleSheet("""
            QLabel {
                background-color: #28a745;
                color: white;
                padding: 10px;
                border-radius: 8px;
                margin: 10px;
            }
        """)
    
    def stop_camera(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã"""
        print("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É –≤ –¥–∏–∞–ª–æ–≥–µ...")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–∑—É
        self.start_camera_button.setEnabled(True)
        self.stop_camera_button.setEnabled(False)
        self.capture_button.setEnabled(False)
        
        if self.camera_thread:
            print("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∫–∞–º–µ—Ä—ã...")
            self.camera_thread.stop()
            self.camera_thread = None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–¥—Ä–∞
        self.camera_label.clear()
        self.camera_label.setText("üì∑\n–ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞")
        self.camera_label.setFont(QFont("Arial", 20))
        self.camera_label.setStyleSheet("""
            QLabel {
                border: 2px solid #ddd;
                border-radius: 10px;
                background-color: #000;
                color: #666;
            }
        """)
        
        self.camera_status_label.setText("–ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞")
        self.camera_status_label.setStyleSheet("""
            QLabel {
                background-color: #6c757d;
                color: white;
                padding: 10px;
                border-radius: 8px;
                margin: 10px;
            }
        """)
        
        self.current_frame = None
        self.detected_faces = []
        print("–ö–∞–º–µ—Ä–∞ –≤ –¥–∏–∞–ª–æ–≥–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def update_camera_frame(self, frame):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã"""
        self.current_frame = frame.copy()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–∞–¥—Ä–∞ –≤ QImage
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        height, width, channel = rgb_frame.shape
        bytes_per_line = 3 * width
        
        from PyQt5.QtGui import QImage
        q_image = QImage(rgb_frame.data, width, height, bytes_per_line, QImage.Format_RGB888)
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        pixmap = QPixmap.fromImage(q_image)
        scaled_pixmap = pixmap.scaled(self.camera_width, self.camera_height, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        
        self.camera_label.setPixmap(scaled_pixmap)
        self.camera_label.setStyleSheet("""
            QLabel {
                border: 2px solid #ddd;
                border-radius: 10px;
            }
        """)
    
    def on_face_detected(self, frame, face_locations):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ª–∏—Ü"""
        self.detected_faces = face_locations
        
        if len(face_locations) == 1:
            # –û–¥–Ω–æ –ª–∏—Ü–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
            self.camera_status_label.setText("‚úÖ –õ–∏—Ü–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –≥–æ—Ç–æ–≤–æ –∫ –∑–∞—Ö–≤–∞—Ç—É")
            self.camera_status_label.setStyleSheet("""
                QLabel {
                    background-color: #28a745;
                    color: white;
                    padding: 10px;
                    border-radius: 8px;
                    margin: 10px;
                }
            """)
            
            # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É –Ω–∞ –∫–∞–¥—Ä–µ
            display_frame = frame.copy()
            top, right, bottom, left = face_locations[0]
            cv2.rectangle(display_frame, (left, top), (right, bottom), (0, 255, 0), 3)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            rgb_frame = cv2.cvtColor(display_frame, cv2.COLOR_BGR2RGB)
            height, width, channel = rgb_frame.shape
            bytes_per_line = 3 * width
            
            from PyQt5.QtGui import QImage
            q_image = QImage(rgb_frame.data, width, height, bytes_per_line, QImage.Format_RGB888)
            pixmap = QPixmap.fromImage(q_image)
            scaled_pixmap = pixmap.scaled(640, 480, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            
            self.camera_label.setPixmap(scaled_pixmap)
            
        elif len(face_locations) > 1:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Ü
            self.camera_status_label.setText("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Ü")
            self.camera_status_label.setStyleSheet("""
                QLabel {
                    background-color: #ffc107;
                    color: black;
                    padding: 10px;
                    border-radius: 8px;
                    margin: 10px;
                }
            """)
        else:
            # –õ–∏—Ü–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã
            self.camera_status_label.setText("üîç –ü–æ–∏—Å–∫ –ª–∏—Ü–∞...")
            self.camera_status_label.setStyleSheet("""
                QLabel {
                    background-color: #17a2b8;
                    color: white;
                    padding: 10px;
                    border-radius: 8px;
                    margin: 10px;
                }
            """)
    
    def capture_face(self):
        """–ó–∞—Ö–≤–∞—Ç –ª–∏—Ü–∞ —Å –∫–∞–º–µ—Ä—ã"""
        if not self.current_frame is None and len(self.detected_faces) == 1:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞
            rgb_frame = cv2.cvtColor(self.current_frame, cv2.COLOR_BGR2RGB)
            face_encodings = face_recognition.face_encodings(rgb_frame, self.detected_faces)
            
            if face_encodings:
                self.face_encoding = face_encodings[0].tolist()
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                temp_filename = f"temp_capture_{timestamp}.jpg"
                temp_path = os.path.join(USER_PHOTOS_DIR, temp_filename)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–¥—Ä —Å —Ä–∞–º–∫–æ–π
                display_frame = self.current_frame.copy()
                top, right, bottom, left = self.detected_faces[0]
                cv2.rectangle(display_frame, (left, top), (right, bottom), (0, 255, 0), 3)
                cv2.imwrite(temp_path, display_frame)
                
                self.photo_path = temp_path
                
                # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã
                self.stop_camera()
                
                # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                self.tab_widget.setCurrentIndex(0)
                self.display_image_with_face_box(self.current_frame, self.detected_faces[0])
                
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–õ–∏—Ü–æ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ö–≤–∞—á–µ–Ω–æ!")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É –ª–∏—Ü–∞")
        else:
            if self.current_frame is None:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ö–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            elif len(self.detected_faces) == 0:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–õ–∏—Ü–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–µ –ª–∏—Ü–æ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –≤ –∫–∞–¥—Ä–µ")
            elif len(self.detected_faces) > 1:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Ü. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –∫–∞–¥—Ä–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ª–∏—Ü–æ")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ –ª–∏—Ü–∞")
    
    def add_user(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π
        if not self.user_id_input.text().strip():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        if not self.full_name_input.text().strip():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        if not self.face_encoding:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        user_id = self.user_id_input.text().strip()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        photo_filename = f"{user_id}_{timestamp}.jpg"
        photo_save_path = os.path.join(USER_PHOTOS_DIR, photo_filename)
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
        if self.photo_path:
            image = cv2.imread(self.photo_path)
            cv2.imwrite(photo_save_path, image)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        user_data = {
            'user_id': user_id,
            'full_name': self.full_name_input.text().strip(),
            'photo_path': photo_filename,
            'face_encoding': self.face_encoding
        }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        result = self.db.add_user(user_data, self.admin_data['id'])
        
        if result:
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            if self.photo_path and 'temp_capture_' in self.photo_path:
                try:
                    os.remove(self.photo_path)
                except:
                    pass
            
            self.accept()
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        self.stop_camera()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if self.photo_path and 'temp_capture_' in self.photo_path:
            try:
                os.remove(self.photo_path)
            except:
                pass
        
        event.accept()
    
    def reject(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
        self.stop_camera()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if self.photo_path and 'temp_capture_' in self.photo_path:
            try:
                os.remove(self.photo_path)
            except:
                pass
        
        super().reject()
    
    def keyPressEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à"""
        if event.key() == Qt.Key_Escape:
            self.reject()