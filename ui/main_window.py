"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü
"""
from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                           QLabel, QPushButton, QStackedWidget, QFrame,
                           QTableWidget, QTableWidgetItem, QHeaderView,
                           QMessageBox, QSizePolicy, QScrollArea, QDesktopWidget)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QDateTime, QSize
from PyQt5.QtGui import QFont, QPixmap, QIcon, QColor

import cv2
import numpy as np
from datetime import datetime

from database import Database
from config import (WINDOW_TITLE, PRIMARY_COLOR, SECONDARY_COLOR, COMPANY_NAME,
                   WINDOW_MIN_WIDTH, WINDOW_MIN_HEIGHT)
from .add_user_dialog import AddUserDialog
from .face_recognition_widget import FaceRecognitionWidget

class MainWindow(QMainWindow):
    def __init__(self, admin_data):
        super().__init__()
        self.admin_data = admin_data
        self.db = Database()
        self.current_page = 0
        self.init_ui()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_time)
        self.timer.start(1000)
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle(WINDOW_TITLE)
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–¥ —ç–∫—Ä–∞–Ω
        desktop = QDesktopWidget()
        screen_rect = desktop.screenGeometry()
        
        if screen_rect.width() >= 1920:
            window_width, window_height = 1200, 800
            sidebar_width = 250
        elif screen_rect.width() >= 1366:
            window_width, window_height = 1100, 700
            sidebar_width = 220
        else:
            window_width, window_height = 900, 600
            sidebar_width = 200
        
        self.setMinimumSize(WINDOW_MIN_WIDTH, WINDOW_MIN_HEIGHT)
        self.resize(window_width, window_height)
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.sidebar_width = sidebar_width
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QHBoxLayout()
        main_layout.setSpacing(0)
        main_layout.setContentsMargins(0, 0, 0, 0)
        central_widget.setLayout(main_layout)
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
        self.create_sidebar()
        main_layout.addWidget(self.sidebar)
        
        # –û–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.content_scroll = QScrollArea()
        self.content_scroll.setWidgetResizable(True)
        self.content_scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.content_scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        
        self.content_area = QStackedWidget()
        self.content_area.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        
        self.content_scroll.setWidget(self.content_area)
        main_layout.addWidget(self.content_scroll, 1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
        self.create_dashboard()
        self.create_users_page()
        self.create_face_recognition_page()
        self.create_reports_page()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f5f5;
            }
            QLabel {
                color: #333;
            }
            QScrollArea {
                border: none;
                background-color: #f5f5f5;
            }
        """)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å dashboard –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.show_dashboard()
    
    def create_sidebar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        self.sidebar = QFrame()
        self.sidebar.setFixedWidth(self.sidebar_width)
        self.sidebar.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Expanding)
        self.sidebar.setStyleSheet(f"""
            QFrame {{
                background-color: {PRIMARY_COLOR};
                border: none;
            }}
        """)
        
        sidebar_layout = QVBoxLayout()
        sidebar_layout.setContentsMargins(0, 0, 0, 0)
        self.sidebar.setLayout(sidebar_layout)
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        company_label = QLabel(COMPANY_NAME)
        company_label.setFont(QFont("Arial", 16, QFont.Bold))
        company_label.setStyleSheet("color: white; padding: 20px;")
        company_label.setAlignment(Qt.AlignCenter)
        company_label.setWordWrap(True)
        sidebar_layout.addWidget(company_label)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = QFrame()
        user_info.setStyleSheet("""
            QFrame {
                background-color: rgba(255, 255, 255, 0.1);
                border-radius: 10px;
                margin: 10px;
                padding: 15px;
            }
        """)
        user_layout = QVBoxLayout()
        user_info.setLayout(user_layout)
        
        user_icon = QLabel("üë§")
        user_icon.setFont(QFont("Arial", 28))
        user_icon.setAlignment(Qt.AlignCenter)
        user_icon.setStyleSheet("color: white;")
        user_layout.addWidget(user_icon)
        
        username_label = QLabel(self.admin_data['username'])
        username_label.setFont(QFont("Arial", 12, QFont.Bold))
        username_label.setStyleSheet("color: white;")
        username_label.setAlignment(Qt.AlignCenter)
        username_label.setWordWrap(True)
        user_layout.addWidget(username_label)
        
        sidebar_layout.addWidget(user_info)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = [
            ("üìä", "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", self.show_dashboard),
            ("üë•", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", self.show_users),
            ("üîç", "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü", self.show_face_recognition),
            ("üìà", "–û—Ç—á–µ—Ç—ã", self.show_reports)
        ]
        
        for icon, text, callback in nav_buttons:
            btn = QPushButton(f"{icon}  {text}")
            btn.setFont(QFont("Arial", 12))
            btn.setCursor(Qt.PointingHandCursor)
            btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
            btn.setMinimumHeight(50)
            btn.setStyleSheet("""
                QPushButton {
                    background-color: transparent;
                    color: white;
                    border: none;
                    padding: 15px;
                    text-align: left;
                    border-radius: 8px;
                    margin: 5px 10px;
                }
                QPushButton:hover {
                    background-color: rgba(255, 255, 255, 0.1);
                }
                QPushButton:pressed {
                    background-color: rgba(255, 255, 255, 0.2);
                }
            """)
            btn.clicked.connect(callback)
            sidebar_layout.addWidget(btn)
        
        sidebar_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        logout_btn = QPushButton("üö™  –í—ã—Ö–æ–¥")
        logout_btn.setFont(QFont("Arial", 12))
        logout_btn.setCursor(Qt.PointingHandCursor)
        logout_btn.setMinimumHeight(50)
        logout_btn.setStyleSheet("""
            QPushButton {
                background-color: rgba(255, 255, 255, 0.1);
                color: white;
                border: none;
                padding: 15px;
                margin: 10px;
                border-radius: 8px;
            }
            QPushButton:hover {
                background-color: rgba(255, 255, 255, 0.2);
            }
        """)
        logout_btn.clicked.connect(self.logout)
        sidebar_layout.addWidget(logout_btn)
    
    def create_dashboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Dashboard"""
        dashboard = QWidget()
        dashboard.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        layout = QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        dashboard.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout = QHBoxLayout()
        title = QLabel("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        title.setFont(QFont("Arial", 28, QFont.Bold))
        title.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        header_layout.addWidget(title)
        
        # –í—Ä–µ–º—è
        self.time_label = QLabel()
        self.time_label.setFont(QFont("Arial", 16))
        self.time_label.setAlignment(Qt.AlignRight)
        self.time_label.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        header_layout.addWidget(self.time_label)
        
        layout.addLayout(header_layout)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_layout = QHBoxLayout()
        stats_layout.setSpacing(20)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = [
            ("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", len(self.db.get_all_users()), "üë•", "#3498db"),
            ("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è", self.db.get_today_recognition_count(), "üîç", "#2ecc71"),
            ("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è", self.db.get_unique_users_today(), "‚úÖ", "#e74c3c"),
            ("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π", 1, "‚ö°", "#f39c12")
        ]
        
        for title, value, icon, color in stats:
            card = self.create_stat_card(title, str(value), icon, color)
            stats_layout.addWidget(card)
        
        layout.addLayout(stats_layout)
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        recent_label = QLabel("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        recent_label.setFont(QFont("Arial", 18, QFont.Bold))
        layout.addWidget(recent_label)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–π
        self.recent_table = QTableWidget()
        self.recent_table.setColumnCount(5)
        self.recent_table.setHorizontalHeaderLabels(["ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ò–º—è", "–í—Ä–µ–º—è", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–°—Ç–∞—Ç—É—Å"])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        header = self.recent_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)
        self.recent_table.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        
        self.recent_table.setAlternatingRowColors(True)
        self.recent_table.setStyleSheet("""
            QTableWidget {
                border: none;
                background-color: white;
                border-radius: 10px;
                gridline-color: #f0f0f0;
            }
            QTableWidget::item {
                padding: 12px;
                border-bottom: 1px solid #f0f0f0;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 12px;
                border: none;
                font-weight: bold;
                border-bottom: 2px solid #e9ecef;
            }
        """)
        
        self.update_recent_recognitions()
        layout.addWidget(self.recent_table)
        
        self.content_area.addWidget(dashboard)
    
    def create_stat_card(self, title, value, icon, color):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        card = QFrame()
        card.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        card.setMinimumHeight(120)
        card.setStyleSheet(f"""
            QFrame {{
                background-color: white;
                border-radius: 12px;
                padding: 20px;
                border-left: 5px solid {color};
            }}
        """)
        
        layout = QVBoxLayout()
        card.setLayout(layout)
        
        # –ò–∫–æ–Ω–∫–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
        top_layout = QHBoxLayout()
        
        icon_label = QLabel(icon)
        icon_label.setFont(QFont("Arial", 36))
        icon_label.setStyleSheet(f"color: {color};")
        icon_label.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        top_layout.addWidget(icon_label)
        
        top_layout.addStretch()
        
        value_label = QLabel(value)
        value_label.setFont(QFont("Arial", 32, QFont.Bold))
        value_label.setAlignment(Qt.AlignRight)
        value_label.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        top_layout.addWidget(value_label)
        
        layout.addLayout(top_layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(title)
        title_label.setFont(QFont("Arial", 14))
        title_label.setStyleSheet("color: #666;")
        title_label.setWordWrap(True)
        layout.addWidget(title_label)
        
        return card
    
    def create_users_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users_page = QWidget()
        users_page.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        layout = QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        users_page.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        header_layout = QHBoxLayout()
        
        title = QLabel("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        title.setFont(QFont("Arial", 28, QFont.Bold))
        title.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        header_layout.addWidget(title)
        
        add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        add_btn.setFont(QFont("Arial", 14))
        add_btn.setCursor(Qt.PointingHandCursor)
        add_btn.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        add_btn.setMinimumHeight(45)
        add_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {SECONDARY_COLOR};
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: #4cae4c;
            }}
        """)
        add_btn.clicked.connect(self.show_add_user_dialog)
        header_layout.addWidget(add_btn)
        
        layout.addLayout(header_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.users_table = QTableWidget()
        self.users_table.setColumnCount(5)
        self.users_table.setHorizontalHeaderLabels([
            "ID", "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", "–ò–º—è", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–î–µ–π—Å—Ç–≤–∏—è"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        header = self.users_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QHeaderView.Stretch)
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(4, QHeaderView.ResizeToContents)
        
        self.users_table.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.users_table.setAlternatingRowColors(True)
        self.users_table.setStyleSheet("""
            QTableWidget {
                border: none;
                background-color: white;
                border-radius: 10px;
                gridline-color: #f0f0f0;
            }
            QTableWidget::item {
                padding: 12px;
                border-bottom: 1px solid #f0f0f0;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 12px;
                border: none;
                font-weight: bold;
                border-bottom: 2px solid #e9ecef;
            }
        """)
        
        self.update_users_table()
        layout.addWidget(self.users_table)
        
        self.content_area.addWidget(users_page)
    
    def create_face_recognition_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü"""
        self.face_recognition_widget = FaceRecognitionWidget(self.db, self.admin_data)
        self.face_recognition_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.content_area.addWidget(self.face_recognition_widget)
    
    def create_reports_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á–µ—Ç–æ–≤"""
        reports_page = QWidget()
        reports_page.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        layout = QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        reports_page.setLayout(layout)
        
        title = QLabel("–û—Ç—á–µ—Ç—ã –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é")
        title.setFont(QFont("Arial", 28, QFont.Bold))
        layout.addWidget(title)
        
        # –§–∏–ª—å—Ç—Ä—ã
        filters_frame = QFrame()
        filters_frame.setStyleSheet("""
            QFrame {
                background-color: white;
                border-radius: 10px;
                padding: 20px;
            }
        """)
        filters_frame.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        filters_layout = QHBoxLayout()
        filters_frame.setLayout(filters_layout)
        
        filters_label = QLabel("–§–∏–ª—å—Ç—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")
        filters_label.setFont(QFont("Arial", 12))
        filters_label.setStyleSheet("color: #666;")
        filters_layout.addWidget(filters_label)
        
        layout.addWidget(filters_frame)
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—á–µ—Ç–æ–≤
        self.reports_table = QTableWidget()
        self.reports_table.setColumnCount(5)
        self.reports_table.setHorizontalHeaderLabels([
            "–î–∞—Ç–∞/–í—Ä–µ–º—è", "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ò–º—è", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–°—Ç–∞—Ç—É—Å"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        header = self.reports_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)
        self.reports_table.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.reports_table.setAlternatingRowColors(True)
        self.reports_table.setStyleSheet("""
            QTableWidget {
                border: none;
                background-color: white;
                border-radius: 10px;
                gridline-color: #f0f0f0;
            }
            QTableWidget::item {
                padding: 12px;
                border-bottom: 1px solid #f0f0f0;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 12px;
                border: none;
                font-weight: bold;
                border-bottom: 2px solid #e9ecef;
            }
        """)
        
        self.update_reports_table()
        layout.addWidget(self.reports_table)
        
        self.content_area.addWidget(reports_page)
    
    def show_dashboard(self):
        self.current_page = 0
        self.content_area.setCurrentIndex(0)
        self.update_recent_recognitions()
    
    def show_users(self):
        self.current_page = 1
        self.content_area.setCurrentIndex(1)
        self.update_users_table()
    
    def show_face_recognition(self):
        self.current_page = 2
        self.content_area.setCurrentIndex(2)
    
    def show_reports(self):
        self.current_page = 3
        self.content_area.setCurrentIndex(3)
        self.update_reports_table()
    
    def show_add_user_dialog(self):
        dialog = AddUserDialog(self, self.db, self.admin_data)
        if dialog.exec_():
            self.update_users_table()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    def update_time(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        current_time = QDateTime.currentDateTime()
        self.time_label.setText(current_time.toString("dddd, d MMMM yyyy - hh:mm:ss"))
    
    def update_recent_recognitions(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–π"""
        records = self.db.get_recognition_report()[:10]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        
        self.recent_table.setRowCount(len(records))
        for i, record in enumerate(records):
            self.recent_table.setItem(i, 0, QTableWidgetItem(record['user_code']))
            self.recent_table.setItem(i, 1, QTableWidgetItem(record['full_name']))
            self.recent_table.setItem(i, 2, QTableWidgetItem(record['timestamp']))
            confidence = f"{record['confidence']*100:.1f}%" if record['confidence'] else "N/A"
            self.recent_table.setItem(i, 3, QTableWidgetItem(confidence))
            self.recent_table.setItem(i, 4, QTableWidgetItem(record['recognition_type']))
    
    def update_users_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = self.db.get_all_users()
        
        self.users_table.setRowCount(len(users))
        for i, user in enumerate(users):
            self.users_table.setItem(i, 0, QTableWidgetItem(str(user['id'])))
            self.users_table.setItem(i, 1, QTableWidgetItem(user['user_id']))
            self.users_table.setItem(i, 2, QTableWidgetItem(user['full_name']))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            created_at = user['created_at']
            if isinstance(created_at, str):
                try:
                    dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    formatted_date = dt.strftime('%d.%m.%Y %H:%M')
                except:
                    formatted_date = created_at
            else:
                formatted_date = str(created_at)
            
            self.users_table.setItem(i, 3, QTableWidgetItem(formatted_date))
            
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
            delete_btn.setCursor(Qt.PointingHandCursor)
            delete_btn.setStyleSheet("""
                QPushButton {
                    background-color: #dc3545;
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 4px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #c82333;
                }
            """)
            delete_btn.clicked.connect(lambda _, user_id=user['id']: self.delete_user(user_id))
            self.users_table.setCellWidget(i, 4, delete_btn)
    
    def update_reports_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—á–µ—Ç–æ–≤"""
        records = self.db.get_recognition_report()[:50]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π
        
        self.reports_table.setRowCount(len(records))
        for i, record in enumerate(records):
            self.reports_table.setItem(i, 0, QTableWidgetItem(record['timestamp']))
            self.reports_table.setItem(i, 1, QTableWidgetItem(record['user_code']))
            self.reports_table.setItem(i, 2, QTableWidgetItem(record['full_name']))
            confidence = f"{record['confidence']*100:.1f}%" if record['confidence'] else "N/A"
            self.reports_table.setItem(i, 3, QTableWidgetItem(confidence))
            self.reports_table.setItem(i, 4, QTableWidgetItem(record['recognition_type']))
    
    def delete_user(self, user_id):
        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", 
                                   "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
                                   QMessageBox.Yes | QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            self.db.delete_user(user_id)
            self.update_users_table()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    
    def logout(self):
        reply = QMessageBox.question(self, "–í—ã—Ö–æ–¥", 
                                   "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
                                   QMessageBox.Yes | QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            # –ú—è–≥–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
            if hasattr(self, 'face_recognition_widget') and self.face_recognition_widget.is_camera_active:
                self.face_recognition_widget.is_camera_active = False
                if self.face_recognition_widget.recognition_thread:
                    self.face_recognition_widget.recognition_thread.is_running = False
            
            self.close()
            from .login_window import LoginWindow
            self.login_window = LoginWindow()
            self.login_window.show()
    
    def resizeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        super().resizeEvent(event)
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        # –ú—è–≥–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if hasattr(self, 'face_recognition_widget') and self.face_recognition_widget.is_camera_active:
            self.face_recognition_widget.is_camera_active = False
            if self.face_recognition_widget.recognition_thread:
                self.face_recognition_widget.recognition_thread.is_running = False
        
        event.accept()