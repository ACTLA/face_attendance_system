"""
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å–∏—Å—Ç–µ–º—ã
"""
from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                           QLabel, QPushButton, QStackedWidget, QFrame,
                           QTableWidget, QTableWidgetItem, QHeaderView,
                           QMessageBox, QSizePolicy, QDesktopWidget)
from PyQt5.QtCore import Qt, QTimer, QDateTime
from PyQt5.QtGui import QFont

from datetime import datetime

from database import Database
from config import (WINDOW_TITLE, PRIMARY_COLOR, SECONDARY_COLOR,
                   WINDOW_MIN_WIDTH, WINDOW_MIN_HEIGHT)
from .add_user_dialog import AddUserDialog
from .face_recognition_widget import FaceRecognitionWidget

class MainWindow(QMainWindow):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ"""
    
    def __init__(self, admin_data):
        super().__init__()
        self.admin_data = admin_data
        self.db = Database()
        self.current_page = 0
        
        self.init_ui()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_time)
        self.timer.start(1000)
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle(WINDOW_TITLE)
        self.setMinimumSize(WINDOW_MIN_WIDTH, WINDOW_MIN_HEIGHT)
        self.resize(1200, 800)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        self.center_on_screen()
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QHBoxLayout()
        main_layout.setSpacing(0)
        main_layout.setContentsMargins(0, 0, 0, 0)
        central_widget.setLayout(main_layout)
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
        sidebar = self.create_sidebar()
        main_layout.addWidget(sidebar)
        
        # –û–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content_area = QStackedWidget()
        self.content_area.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        main_layout.addWidget(self.content_area, 1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
        self.create_dashboard()
        self.create_users_page()
        self.create_face_recognition_page()
        self.create_reports_page()
        
        # –°—Ç–∏–ª–∏
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f5f5;
            }
            QWidget {
                font-family: 'Segoe UI', Arial, sans-serif;
            }
        """)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å dashboard –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.show_dashboard()
    
    def center_on_screen(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        desktop = QDesktopWidget()
        screen_rect = desktop.screenGeometry()
        window_rect = self.geometry()
        
        x = (screen_rect.width() - window_rect.width()) // 2
        y = (screen_rect.height() - window_rect.height()) // 2
        
        self.move(max(0, x), max(0, y))
    
    def create_sidebar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        sidebar = QFrame()
        sidebar.setFixedWidth(250)
        sidebar.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Expanding)
        sidebar.setStyleSheet(f"""
            QFrame {{
                background-color: {PRIMARY_COLOR};
                border: none;
            }}
        """)
        
        layout = QVBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        sidebar.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = QFrame()
        header_frame.setStyleSheet("background-color: rgba(255, 255, 255, 0.1);")
        header_layout = QVBoxLayout()
        header_frame.setLayout(header_layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_label = QLabel(f"{self.admin_data['username']}")
        user_label.setFont(QFont("Arial", 12))
        user_label.setStyleSheet("color: white; padding: 10px 20px;")
        user_label.setAlignment(Qt.AlignCenter)
        header_layout.addWidget(user_label)
        
        layout.addWidget(header_frame)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = [
            ("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", self.show_dashboard),
            ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", self.show_users),
            ("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü", self.show_face_recognition),
            ("–û—Ç—á–µ—Ç—ã", self.show_reports)
        ]
        
        for text, callback in nav_buttons:
            btn = QPushButton(f"{text}")
            btn.setFont(QFont("Arial", 11))
            btn.setCursor(Qt.PointingHandCursor)
            btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
            btn.setMinimumHeight(50)
            btn.setStyleSheet("""
                QPushButton {
                    background-color: transparent;
                    color: white;
                    border: none;
                    padding: 15px 20px;
                    text-align: left;
                    border-radius: 0;
                }
                QPushButton:hover {
                    background-color: rgba(255, 255, 255, 0.1);
                }
                QPushButton:pressed {
                    background-color: rgba(255, 255, 255, 0.2);
                }
            """)
            btn.clicked.connect(callback)
            layout.addWidget(btn)
        
        layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        logout_btn = QPushButton("–í—ã—Ö–æ–¥")
        logout_btn.setFont(QFont("Arial", 11))
        logout_btn.setCursor(Qt.PointingHandCursor)
        logout_btn.setMinimumHeight(50)
        logout_btn.setStyleSheet("""
            QPushButton {
                background-color: rgba(255, 255, 255, 0.1);
                color: white;
                border: none;
                padding: 15px 20px;
                margin: 10px;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: rgba(255, 255, 255, 0.2);
            }
        """)
        logout_btn.clicked.connect(self.logout)
        layout.addWidget(logout_btn)
        
        return sidebar
    
    def create_dashboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        dashboard = QWidget()
        layout = QVBoxLayout()
        layout.setContentsMargins(30, 30, 30, 30)
        dashboard.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout = QHBoxLayout()
        
        title = QLabel("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        title.setFont(QFont("Arial", 24, QFont.Bold))
        title.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        header_layout.addWidget(title)
        
        # –í—Ä–µ–º—è
        self.time_label = QLabel()
        self.time_label.setFont(QFont("Arial", 14))
        self.time_label.setAlignment(Qt.AlignRight)
        header_layout.addWidget(self.time_label)
        
        layout.addLayout(header_layout)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_layout = QHBoxLayout()
        stats_layout.setSpacing(20)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = [
            ("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", len(self.db.get_all_users()), "üë•", "#3498db"),
            ("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è", self.db.get_today_recognition_count(), "üîç", "#2ecc71"),
            ("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è", self.db.get_unique_users_today(), "‚úÖ", "#e74c3c"),
            ("–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞", "–î–ê", "‚ö°", "#f39c12")
        ]
        
        for title_text, value, icon, color in stats:
            card = self.create_stat_card(title_text, str(value), icon, color)
            stats_layout.addWidget(card)
        
        layout.addLayout(stats_layout)
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        recent_label = QLabel("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        recent_label.setFont(QFont("Arial", 16, QFont.Bold))
        layout.addWidget(recent_label)
        
        # –¢–∞–±–ª–∏—Ü–∞
        self.recent_table = QTableWidget()
        self.recent_table.setColumnCount(5)
        self.recent_table.setHorizontalHeaderLabels([
            "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ò–º—è", "–í—Ä–µ–º—è", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–°—Ç–∞—Ç—É—Å"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.recent_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)
        self.recent_table.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.recent_table.setAlternatingRowColors(True)
        self.recent_table.setStyleSheet("""
            QTableWidget {
                border: none;
                background-color: white;
                border-radius: 8px;
                gridline-color: #f0f0f0;
            }
            QTableWidget::item {
                padding: 12px;
                border-bottom: 1px solid #f0f0f0;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 12px;
                border: none;
                font-weight: bold;
                border-bottom: 2px solid #e9ecef;
            }
        """)
        
        self.update_recent_recognitions()
        layout.addWidget(self.recent_table)
        
        self.content_area.addWidget(dashboard)
    
    def create_stat_card(self, title, value, icon, color):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        card = QFrame()
        card.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        card.setMinimumHeight(120)
        card.setStyleSheet(f"""
            QFrame {{
                background-color: white;
                border-radius: 10px;
                padding: 20px;
                border-left: 4px solid {color};
                border: 1px solid #e9ecef;
            }}
        """)
        
        layout = QVBoxLayout()
        card.setLayout(layout)
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å - –∏–∫–æ–Ω–∫–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
        top_layout = QHBoxLayout()
        
        icon_label = QLabel(icon)
        icon_label.setFont(QFont("Arial", 30))
        icon_label.setStyleSheet(f"color: {color};")
        top_layout.addWidget(icon_label)
        
        top_layout.addStretch()
        
        value_label = QLabel(value)
        value_label.setFont(QFont("Arial", 28, QFont.Bold))
        value_label.setAlignment(Qt.AlignRight)
        top_layout.addWidget(value_label)
        
        layout.addLayout(top_layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(title)
        title_label.setFont(QFont("Arial", 12))
        title_label.setStyleSheet("color: #666;")
        title_label.setWordWrap(True)
        layout.addWidget(title_label)
        
        return card
    
    def create_users_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users_page = QWidget()
        layout = QVBoxLayout()
        layout.setContentsMargins(30, 30, 30, 30)
        users_page.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        header_layout = QHBoxLayout()
        
        title = QLabel("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        title.setFont(QFont("Arial", 24, QFont.Bold))
        header_layout.addWidget(title)
        
        header_layout.addStretch()
        
        add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        add_btn.setFont(QFont("Arial", 12))
        add_btn.setCursor(Qt.PointingHandCursor)
        add_btn.setMinimumHeight(40)
        add_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {SECONDARY_COLOR};
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: #218838;
            }}
        """)
        add_btn.clicked.connect(self.show_add_user_dialog)
        header_layout.addWidget(add_btn)
        
        layout.addLayout(header_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.users_table = QTableWidget()
        self.users_table.setColumnCount(5)
        self.users_table.setHorizontalHeaderLabels([
            "ID", "–ò–º—è", "Email", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–î–µ–π—Å—Ç–≤–∏—è"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.users_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.Stretch)
        header.setSectionResizeMode(2, QHeaderView.Stretch)
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(4, QHeaderView.ResizeToContents)
        
        self.users_table.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.users_table.setAlternatingRowColors(True)
        self.users_table.setStyleSheet("""
            QTableWidget {
                border: none;
                background-color: white;
                border-radius: 8px;
                gridline-color: #f0f0f0;
            }
            QTableWidget::item {
                padding: 12px;
                border-bottom: 1px solid #f0f0f0;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 12px;
                border: none;
                font-weight: bold;
                border-bottom: 2px solid #e9ecef;
            }
        """)
        
        self.update_users_table()
        layout.addWidget(self.users_table)
        
        self.content_area.addWidget(users_page)
    
    def create_face_recognition_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü"""
        self.face_recognition_widget = FaceRecognitionWidget(self.db, self.admin_data)
        self.content_area.addWidget(self.face_recognition_widget)
    
    def create_reports_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á–µ—Ç–æ–≤"""
        reports_page = QWidget()
        layout = QVBoxLayout()
        layout.setContentsMargins(30, 30, 30, 30)
        reports_page.setLayout(layout)
        
        title = QLabel("–û—Ç—á–µ—Ç—ã –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é")
        title.setFont(QFont("Arial", 24, QFont.Bold))
        layout.addWidget(title)
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—á–µ—Ç–æ–≤
        self.reports_table = QTableWidget()
        self.reports_table.setColumnCount(5)
        self.reports_table.setHorizontalHeaderLabels([
            "–î–∞—Ç–∞/–í—Ä–µ–º—è", "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ò–º—è", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–°—Ç–∞—Ç—É—Å"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.reports_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)
        self.reports_table.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.reports_table.setAlternatingRowColors(True)
        self.reports_table.setStyleSheet("""
            QTableWidget {
                border: none;
                background-color: white;
                border-radius: 8px;
                gridline-color: #f0f0f0;
            }
            QTableWidget::item {
                padding: 12px;
                border-bottom: 1px solid #f0f0f0;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 12px;
                border: none;
                font-weight: bold;
                border-bottom: 2px solid #e9ecef;
            }
        """)
        
        self.update_reports_table()
        layout.addWidget(self.reports_table)
        
        self.content_area.addWidget(reports_page)
    
    def show_dashboard(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        self.current_page = 0
        self.content_area.setCurrentIndex(0)
        self.update_recent_recognitions()
    
    def show_users(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.current_page = 1
        self.content_area.setCurrentIndex(1)
        self.update_users_table()
    
    def show_face_recognition(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü"""
        self.current_page = 2
        self.content_area.setCurrentIndex(2)
    
    def show_reports(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç—á–µ—Ç–æ–≤"""
        self.current_page = 3
        self.content_area.setCurrentIndex(3)
        self.update_reports_table()
    
    def show_add_user_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        dialog = AddUserDialog(self, self.db, self.admin_data)
        if dialog.exec_():
            self.update_users_table()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü
            if hasattr(self, 'face_recognition_widget'):
                self.face_recognition_widget.recognition_engine.reload_face_encodings()
            
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    def update_time(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        current_time = QDateTime.currentDateTime()
        self.time_label.setText(current_time.toString("dd.MM.yyyy - hh:mm:ss"))
    
    def update_recent_recognitions(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–π"""
        try:
            records = self.db.get_recognition_report()[:10]
            
            self.recent_table.setRowCount(len(records))
            for i, record in enumerate(records):
                self.recent_table.setItem(i, 0, QTableWidgetItem(record['user_code']))
                self.recent_table.setItem(i, 1, QTableWidgetItem(record['full_name']))
                self.recent_table.setItem(i, 2, QTableWidgetItem(record['timestamp']))
                
                confidence = f"{record['confidence']*100:.1f}%" if record['confidence'] else "N/A"
                self.recent_table.setItem(i, 3, QTableWidgetItem(confidence))
                self.recent_table.setItem(i, 4, QTableWidgetItem(record['recognition_type']))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–π: {e}")
    
    def update_users_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            users = self.db.get_all_users()
            
            self.users_table.setRowCount(len(users))
            for i, user in enumerate(users):
                self.users_table.setItem(i, 0, QTableWidgetItem(user['user_id']))
                self.users_table.setItem(i, 1, QTableWidgetItem(user['full_name']))
                self.users_table.setItem(i, 2, QTableWidgetItem(user.get('email', '')))
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
                created_at = user['created_at']
                if isinstance(created_at, str):
                    try:
                        dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        formatted_date = dt.strftime('%d.%m.%Y %H:%M')
                    except:
                        formatted_date = created_at
                else:
                    formatted_date = str(created_at)
                
                self.users_table.setItem(i, 3, QTableWidgetItem(formatted_date))
                
                # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
                delete_btn.setCursor(Qt.PointingHandCursor)
                delete_btn.setStyleSheet("""
                    QPushButton {
                        background-color: #dc3545;
                        color: white;
                        border: none;
                        padding: 6px 12px;
                        border-radius: 4px;
                        font-weight: bold;
                    }
                    QPushButton:hover {
                        background-color: #c82333;
                    }
                """)
                delete_btn.clicked.connect(lambda _, user_id=user['id']: self.delete_user(user_id))
                self.users_table.setCellWidget(i, 4, delete_btn)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def update_reports_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—á–µ—Ç–æ–≤"""
        try:
            records = self.db.get_recognition_report()[:50]
            
            self.reports_table.setRowCount(len(records))
            for i, record in enumerate(records):
                self.reports_table.setItem(i, 0, QTableWidgetItem(record['timestamp']))
                self.reports_table.setItem(i, 1, QTableWidgetItem(record['user_code']))
                self.reports_table.setItem(i, 2, QTableWidgetItem(record['full_name']))
                
                confidence = f"{record['confidence']*100:.1f}%" if record['confidence'] else "N/A"
                self.reports_table.setItem(i, 3, QTableWidgetItem(confidence))
                self.reports_table.setItem(i, 4, QTableWidgetItem(record['recognition_type']))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—á–µ—Ç–æ–≤: {e}")
    
    def delete_user(self, user_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        reply = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", 
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            try:
                self.db.delete_user(user_id)
                self.update_users_table()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü
                if hasattr(self, 'face_recognition_widget'):
                    self.face_recognition_widget.recognition_engine.remove_face(user_id)
                
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
    
    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        reply = QMessageBox.question(
            self, "–í—ã—Ö–æ–¥", 
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
            if hasattr(self, 'face_recognition_widget'):
                if self.face_recognition_widget.is_camera_active:
                    self.face_recognition_widget.stop_recognition()
            
            self.close()
            
            # –ü–æ–∫–∞–∑ –æ–∫–Ω–∞ –≤—Ö–æ–¥–∞
            from .login_window import LoginWindow
            self.login_window = LoginWindow()
            self.login_window.show()
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if hasattr(self, 'face_recognition_widget'):
            if self.face_recognition_widget.is_camera_active:
                self.face_recognition_widget.stop_recognition()
        
        event.accept()