"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü
"""
import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from PyQt5.QtWidgets import QApplication, QMessageBox, QSplashScreen, QLabel
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QPixmap, QFont, QPainter, QLinearGradient, QBrush, QColor

from config import (WINDOW_TITLE, LOG_LEVEL, LOG_FORMAT, 
                   LOG_MAX_BYTES, LOG_BACKUP_COUNT, LOGS_DIR)
from ui.login_window import LoginWindow
from ui.main_window import MainWindow

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
        LOGS_DIR.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        from logging.handlers import RotatingFileHandler
        
        # –ö–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
        root_logger = logging.getLogger()
        root_logger.setLevel(getattr(logging, LOG_LEVEL, logging.INFO))
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        for handler in root_logger.handlers[:]:
            root_logger.removeHandler(handler)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(LOG_FORMAT)
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        root_logger.addHandler(console_handler)
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        log_file = LOGS_DIR / 'face_recognition.log'
        file_handler = RotatingFileHandler(
            log_file,
            maxBytes=LOG_MAX_BYTES,
            backupCount=LOG_BACKUP_COUNT,
            encoding='utf-8'
        )
        file_handler.setFormatter(formatter)
        root_logger.addHandler(file_handler)
        
        logging.info("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    missing_deps = []
    
    try:
        import cv2
    except ImportError:
        missing_deps.append("opencv-python")
    
    try:
        import face_recognition
    except ImportError:
        missing_deps.append("face-recognition")
    
    try:
        import numpy
    except ImportError:
        missing_deps.append("numpy")
    
    try:
        from PyQt5 import QtWidgets
    except ImportError:
        missing_deps.append("PyQt5")
    
    if missing_deps:
        return missing_deps
    
    return None

def check_camera():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–º–µ—Ä—ã"""
    try:
        import cv2
        cap = cv2.VideoCapture(0)
        if cap.isOpened():
            ret, frame = cap.read()
            cap.release()
            return ret and frame is not None
        return False
    except Exception:
        return False

class FaceRecognitionApp:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.app = QApplication(sys.argv)
        self.app.setApplicationName(WINDOW_TITLE)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è
        self.app.setStyle('Fusion')
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
        self.app.setStyleSheet("""
            QWidget {
                font-family: 'Segoe UI', 'Arial', sans-serif;
            }
            QMessageBox {
                background-color: white;
                min-width: 300px;
            }
            QMessageBox QPushButton {
                min-width: 80px;
                min-height: 30px;
                padding: 6px 12px;
                border-radius: 4px;
                font-weight: bold;
            }
            QScrollBar:vertical {
                background-color: #f0f0f0;
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background-color: #c0c0c0;
                border-radius: 6px;
                min-height: 20px;
            }
        """)
        
        self.login_window = None
        self.main_window = None
        
        logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def show_splash_screen(self):
        """–ü–æ–∫–∞–∑ –∑–∞—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        splash = QSplashScreen()
        splash.setFixedSize(400, 250)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ pixmap –¥–ª—è –∑–∞—Å—Ç–∞–≤–∫–∏
        pixmap = QPixmap(400, 250)
        pixmap.fill(Qt.white)
        
        painter = QPainter(pixmap)
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        gradient = QLinearGradient(0, 0, 400, 250)
        gradient.setColorAt(0, QColor.fromRgb(59, 93, 212))
        gradient.setColorAt(1, QColor.fromRgb(118, 75, 162))
        painter.fillRect(0, 0, 400, 250, QBrush(gradient))
        
        
        painter.setFont(QFont("Arial", 14))
        painter.drawText(20, 120, 360, 25, Qt.AlignCenter, "–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü")
        
        painter.setFont(QFont("Arial", 12))
        painter.drawText(20, 200, 360, 25, Qt.AlignCenter, "–ó–∞–≥—Ä—É–∑–∫–∞...")
        
        painter.end()
        
        splash.setPixmap(pixmap)
        splash.show()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.app.processEvents()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        QTimer.singleShot(2000, lambda: self.hide_splash_and_show_login(splash))
        
        return splash
    
    def hide_splash_and_show_login(self, splash):
        """–°–∫—Ä—ã—Ç–∏–µ –∑–∞—Å—Ç–∞–≤–∫–∏ –∏ –ø–æ–∫–∞–∑ –æ–∫–Ω–∞ –≤—Ö–æ–¥–∞"""
        splash.close()
        self.show_login()
    
    def show_login(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –≤—Ö–æ–¥–∞"""
        self.login_window = LoginWindow()
        self.login_window.login_successful.connect(self.on_login_success)
        self.login_window.show()
        logging.info("–ü–æ–∫–∞–∑–∞–Ω–æ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞")
    
    def on_login_success(self, admin_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"""
        logging.info(f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {admin_data['username']}")
        
        if self.login_window:
            self.login_window.close()
        
        self.main_window = MainWindow(admin_data)
        self.main_window.show()
        
        logging.info("–ü–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ü–æ–∫–∞–∑ –∑–∞—Å—Ç–∞–≤–∫–∏
            splash = self.show_splash_screen()
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            return self.app.exec_()
            
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            QMessageBox.critical(None, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", 
                               f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{str(e)}")
            return 1

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü...")
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging()
        logging.info("=" * 50)
        logging.info("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü")
        logging.info("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        missing_deps = check_dependencies()
        
        if missing_deps:
            error_msg = (
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:\n\n" +
                "\n".join(f"‚Ä¢ {dep}" for dep in missing_deps) +
                "\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n" +
                f"pip install {' '.join(missing_deps)}"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ GUI –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            try:
                app = QApplication(sys.argv)
                QMessageBox.critical(None, "–û—à–∏–±–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", error_msg)
            except:
                print(error_msg)
            
            logging.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {missing_deps}")
            return 1
        
        logging.info("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–µ—Ä—ã
        print("üì∑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–µ—Ä—ã...")
        if check_camera():
            print("‚úÖ –ö–∞–º–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
            logging.info("–ö–∞–º–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            logging.warning("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        from config import DATA_DIR, USER_PHOTOS_DIR
        for directory in [DATA_DIR, USER_PHOTOS_DIR, LOGS_DIR]:
            directory.mkdir(exist_ok=True)
        
        logging.info("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("üéØ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        app = FaceRecognitionApp()
        exit_code = app.run()
        
        logging.info(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º: {exit_code}")
        print("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        return exit_code
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        print(f"‚ùå {error_msg}")
        logging.critical(error_msg, exc_info=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ GUI –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            app = QApplication(sys.argv)
            QMessageBox.critical(None, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", error_msg)
        except:
            pass
        
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)